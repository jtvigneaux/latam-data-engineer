Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    10  48.6797 MiB  48.6797 MiB           1   @profile(precision=4)
    11                                         def group_by_date(file_path: str) -> Dict[str, Dict[str, int]]:
    12                                             """Revisar todos los tweets para agruparlos por fecha
    13                                         
    14                                             Args:
    15                                                 file_path (str): Ubicacion del archivo con los tweets
    16                                         
    17                                             Returns:
    18                                                 Dict[str, Dict[str, int]]: Tweets por Usuario por Fecha
    19                                             """
    20                                             #dates = {}
    21  48.6797 MiB   0.0000 MiB           1       user_by_date = {}
    22                                             
    23  53.5703 MiB   0.0000 MiB           2       with open(file_path, 'r') as file:
    24                                                 # Revisar cada fila de tweets (un total de m)
    25  53.5703 MiB   0.5078 MiB      117408           for line in file:
    26  53.5703 MiB   3.0938 MiB      117407               date = datetime.fromisoformat(json.loads(line)['date']).date().strftime('%Y%m%d')
    27                                                     # Conteo de tweets por usuario para fecha
    28  53.5703 MiB   0.7734 MiB      117407               username = json.loads(line).get('user').get('username')
    29  53.5703 MiB   0.0000 MiB      117407               if user_by_date.get(date, {}).get(username):
    30  53.5703 MiB   0.0000 MiB       65761                   user_by_date[date][username] += 1
    31                                                     else:
    32  53.5703 MiB   0.0000 MiB       51646                   if user_by_date.get(date):
    33  53.5703 MiB   0.5156 MiB       51633                       user_by_date[date][username] = 1
    34                                                         else:
    35  52.7969 MiB   0.0000 MiB          13                       user_by_date[date] = {username: 1}
    36                                                             
    37  53.5703 MiB   0.0000 MiB      117407               del date
    38  53.5703 MiB   0.0000 MiB      117407               del username
    39                                                             
    40  53.5703 MiB   0.0000 MiB           1       return user_by_date


Filename: /home/jtvigneaux/git/latam-data-engineer/src/q1_memory.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    42  53.5703 MiB  53.5703 MiB           1   @profile(precision=4)
    43                                         def popular_dates(dates: Dict[str, int]) -> List[str]:
    44                                             """Calcular las 10 fechas con mas tweet
    45                                         
    46                                             Args:
    47                                                 dates (Dict[str, int]): Cantidad de tweets por usuario por fecha
    48                                         
    49                                             Returns:
    50                                                 List[str]: Top 10 fechas de mayor a menor
    51                                             """
    52                                             # Hay que sumar la cantidad de tweeets totales entre todos los uusarios de una fecha
    53  53.5703 MiB   0.0000 MiB          39       return [date for date, _ in heapq.nlargest(10, dates.items(), key=lambda x: sum(x[1].values()))]


Filename: /home/jtvigneaux/git/latam-data-engineer/src/q1_memory.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    55  53.5703 MiB  53.5703 MiB           1   @profile(precision=4)
    56                                         def popular_users(user_by_date: Dict[str, int], min_heap: List[Tuple[str, int]]) -> List[str]:
    57                                             """Calculate the most popular user for each of the top 10 dates.
    58                                         
    59                                             Args:
    60                                                 user_by_date (Dict[str, int]): Amount of tweets by user by date
    61                                                 min_heap (List[Tuple[str, int]]): Min-Heap tree with the top 10 dates 
    62                                         
    63                                             Returns:
    64                                                 List[str]: List of most popular contributor by date
    65                                             """
    66  53.5703 MiB   0.0000 MiB       88331       return [max(user_by_date[date].items(), key=lambda x: x[1])[0] for date in min_heap]            


Filename: /home/jtvigneaux/git/latam-data-engineer/src/q1_memory.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    68  48.6797 MiB  48.6797 MiB           1   @profile(precision=4)
    69                                         def q1_memory(file_path: str) -> List[Tuple[str, int]]:
    70                                             """Find the 10 dates with the most tweets and the user with the most tweets for each of those dates, all while optimizing memory usage.
    71                                         
    72                                             Args:
    73                                                 file_path (str): file with the list of tweets
    74                                         
    75                                             Returns:
    76                                                 List[Tuple[str, int]]: Top 10 most popular dates with its most popular user
    77                                             """
    78                                             # agrupar por fecha (O(m))
    79  53.5703 MiB   4.8906 MiB           1       dates_by_user = group_by_date(file_path)
    80                                             
    81                                             # Calcular el min-heam (O(nlog10))
    82  53.5703 MiB   0.0000 MiB           1       min_heap = popular_dates(dates_by_user)
    83                                             
    84  53.5703 MiB   0.0000 MiB           1       users = popular_users(dates_by_user, min_heap)
    85                                             
    86                                             #return [(date, popular_users(dates_by_user.get(date))) for date, _ in min_heap] 
    87  53.5703 MiB   0.0000 MiB          13       result = [(date, user) for date, user in zip(min_heap, users)] 
    88                                             
    89                                             # Delete from memory
    90  52.1484 MiB  -1.4219 MiB           1       del dates_by_user
    91  52.1484 MiB   0.0000 MiB           1       del min_heap
    92  52.1484 MiB   0.0000 MiB           1       del users
    93                                             
    94  52.1484 MiB   0.0000 MiB           1       return result