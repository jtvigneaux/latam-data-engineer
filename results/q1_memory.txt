Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     9  48.6953125000 MiB  48.6953125000 MiB           1   @profile(precision=10)
    10                                         def group_by_date(file_path: str) -> Dict[str, Dict[str, int]]:
    11                                             """Revisar todos los tweets para agruparlos por fecha
    12                                         
    13                                             Args:
    14                                                 file_path (str): Ubicacion del archivo con los tweets
    15                                         
    16                                             Returns:
    17                                                 Dict[str, Dict[str, int]]: Tweets por Usuario por Fecha
    18                                             """
    19                                             #dates = {}
    20  48.6953125000 MiB   0.0000000000 MiB           1       user_by_date = {}
    21                                             
    22  53.5859375000 MiB   0.0000000000 MiB           2       with open(file_path, 'r') as file:
    23                                                 # Revisar cada fila de tweets (un total de m)
    24  53.5859375000 MiB   0.2578125000 MiB      117408           for line in file:
    25  53.5859375000 MiB   2.8359375000 MiB      117407               date = datetime.fromisoformat(json.loads(line)['date']).date().strftime('%Y%m%d')
    26                                                     # Conteo de tweets por usuario para fecha
    27  53.5859375000 MiB   0.7656250000 MiB      117407               username = json.loads(line).get('user').get('username')
    28  53.5859375000 MiB   0.0000000000 MiB      117407               if user_by_date.get(date, {}).get(username):
    29  53.5859375000 MiB   0.0000000000 MiB       65761                   user_by_date[date][username] += 1
    30                                                     else:
    31  53.5859375000 MiB   0.0000000000 MiB       51646                   if user_by_date.get(date):
    32  53.5859375000 MiB   1.0312500000 MiB       51633                       user_by_date[date][username] = 1
    33                                                         else:
    34  52.8125000000 MiB   0.0000000000 MiB          13                       user_by_date[date] = {username: 1}
    35                                                             
    36  53.5859375000 MiB   0.0000000000 MiB      117407               del date
    37  53.5859375000 MiB   0.0000000000 MiB      117407               del username
    38                                                             
    39  53.5859375000 MiB   0.0000000000 MiB           1       return user_by_date


Filename: /home/jtvigneaux/git/latam-data-engineer/src/q1_memory.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    41  53.5859375000 MiB  53.5859375000 MiB           1   @profile(precision=10)
    42                                         def popular_dates(dates: Dict[str, int]) -> List[str]:
    43                                             """Calcular las 10 fechas con mas tweet
    44                                         
    45                                             Args:
    46                                                 dates (Dict[str, int]): Cantidad de tweets por usuario por fecha
    47                                         
    48                                             Returns:
    49                                                 List[str]: Top 10 fechas de mayor a menor
    50                                             """
    51                                             # Hay que sumar la cantidad de tweeets totales entre todos los usarios de una fecha
    52  53.5859375000 MiB   0.0000000000 MiB          39       return [date for date, _ in heapq.nlargest(10, dates.items(), key=lambda x: sum(x[1].values()))]


Filename: /home/jtvigneaux/git/latam-data-engineer/src/q1_memory.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    54  53.5859375000 MiB  53.5859375000 MiB           1   @profile(precision=10)
    55                                         def popular_users(user_by_date: Dict[str, int], min_heap: List[Tuple[str, int]]) -> List[str]:
    56                                             """Calculate the most popular user for each of the top 10 dates.
    57                                         
    58                                             Args:
    59                                                 user_by_date (Dict[str, int]): Amount of tweets by user by date
    60                                                 min_heap (List[Tuple[str, int]]): Min-Heap tree with the top 10 dates 
    61                                         
    62                                             Returns:
    63                                                 List[str]: List of most popular contributor by date
    64                                             """
    65  53.5859375000 MiB   0.0000000000 MiB       88331       return [max(user_by_date[date].items(), key=lambda x: x[1])[0] for date in min_heap]            


Filename: /home/jtvigneaux/git/latam-data-engineer/src/q1_memory.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    67  48.6953125000 MiB  48.6953125000 MiB           1   @profile(precision=10)
    68                                         def q1_memory(file_path: str) -> List[Tuple[str, int]]:
    69                                             """Find the 10 dates with the most tweets and the user with the most tweets for each of those dates, all while optimizing memory usage.
    70                                         
    71                                             Args:
    72                                                 file_path (str): file with the list of tweets
    73                                         
    74                                             Returns:
    75                                                 List[Tuple[str, int]]: Top 10 most popular dates with its most popular user
    76                                             """
    77                                             # agrupar por fecha
    78  53.5859375000 MiB   4.8906250000 MiB           1       dates_by_user = group_by_date(file_path)
    79                                             
    80                                             # Calcular el min-heap
    81  53.5859375000 MiB   0.0000000000 MiB           1       min_heap = popular_dates(dates_by_user)
    82                                             
    83  53.5859375000 MiB   0.0000000000 MiB           1       users = popular_users(dates_by_user, min_heap)
    84                                             
    85  53.5859375000 MiB   0.0000000000 MiB          13       result = [(date, user) for date, user in zip(min_heap, users)] 
    86                                             
    87                                             # Delete from memory
    88  52.2343750000 MiB  -1.3515625000 MiB           1       del dates_by_user
    89  52.2343750000 MiB   0.0000000000 MiB           1       del min_heap
    90  52.2343750000 MiB   0.0000000000 MiB           1       del users
    91                                             
    92  52.2343750000 MiB   0.0000000000 MiB           1       return result